{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh10900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* \
Initial pattern to load an MDW dimension from a stage table without Slowly Changing Dimension logic.  It's assumed that the history of changes to this simple dimension would not be tracked.\
\
This script builds a sequence, stream, view, and task.  A Snowflake warehouse is also required, as well as the appropriate privileges.\
\
The core logic is based on an article written by John Gontarz, Sales Engineer at Snowflake - https://community.snowflake.com/s/article/Building-a-Type-2-Slowly-Changing-Dimension-in-Snowflake-Using-Streams-and-Tasks-Part-1.  \
\
Modifications made to work with the existing MDW enterprise dimensional model and to limit which columns trigger SCD2 insert/update versus a regular update.\
\
Assumes the stage_unit_of_measure and dimension_unit_of_measure MDW tables have already been built. See mdw_master_snowflake.txt for the DDL.\
*/\
\
create or replace sequence seq_unit_of_measure start with 1 increment by 1;\
\
create or replace stream stage_unit_of_measure_changes on table stage_unit_of_measure;\
\
--generates data to load into the dimension_unit_of_measure table.\
create or replace view unit_of_measure_change_data as\
-- This first subquery figures out what to do when data is inserted into the stage_unit_of_measure table\
-- An insert to the stage_unit_of_measure table results in an INSERT to the dimension_unit_of_measure table\
select unit_of_measure_sk, unit_of_measure_id, unit_of_measure_name, unit_of_measure_desc, source_system_sk, \
hosted_client_sk, dw_start_date, dw_stop_date, dw_current_ind, 'I' as dml_type\
from (select unit_of_measure_sk, unit_of_measure_id, unit_of_measure_name, unit_of_measure_desc, source_system_sk, \
hosted_client_sk, dw_load_date as dw_start_date,\
lag(dw_load_date) over (partition by unit_of_measure_id order by dw_load_date desc) as dw_stop_date_raw, \
--Lag accesses dimension versions with the same key without having to join the table to itself.\
--if multiple rows with same key are found, the latest is marked as current, the rest are loaded as not current.\
case when dw_stop_date_raw is null then '9999-12-31'::timestamp_ntz else dw_stop_date_raw end as dw_stop_date,\
--case when dw_stop_date is null then 'Y' else 'N' end as dw_current_ind\
case when dw_stop_date = '9999-12-31'::timestamp_ntz then 'Y' else 'N' end as dw_current_ind\
from (select null as unit_of_measure_sk, --subsequent merge will insert SEQ_unit_of_measure.nextval.  This keeps the column count in the union consistent with other subqueries that need to sk.\
unit_of_measure_id, unit_of_measure_name, unit_of_measure_desc, source_system_id as source_system_sk, \
hosted_client_sk, dw_load_date\
    from stage_unit_of_measure_changes --stream on stage_unit_of_measure\
    where metadata$action = 'INSERT'\
    and metadata$isupdate = 'FALSE'))\
--End INSERT subquery\
-- START UPDATES - changes in stage that do not trigger a new insert in the dimension\
union\
select distinct d.unit_of_measure_sk, c.unit_of_measure_id, c.unit_of_measure_name, c.unit_of_measure_desc, d.source_system_sk, \
c.hosted_client_sk, d.dw_start_date, d.dw_stop_date,\
d.dw_current_ind,'UPDATE' as dml_type\
    from stage_unit_of_measure_changes c --stream\
    join dimension_unit_of_measure d \
    on c.unit_of_measure_id = d.unit_of_measure_id\
    and c.dw_soft_delete_ind = 'N' --excludes soft delete updates (processed in delete section)\
    where c.metadata$action = 'INSERT' and c.metadata$isupdate = 'TRUE'\
--END UPDATES\
union\
-- This subquery figures out what to do when data is deleted from the stage_unit_of_measure table (hard or soft)\
-- A deletion from the stage_unit_of_measure table results in an update to the dimension_unit_of_measure table\
select unit_of_measure_sk, unit_of_measure_id, unit_of_measure_name, unit_of_measure_desc, source_system_sk,\
hosted_client_sk, dw_start_date, dw_stop_date, dw_current_ind, dml_type \
from (\
select nh.unit_of_measure_sk,\
nms.unit_of_measure_id, nms.unit_of_measure_name, nms.unit_of_measure_desc, nms.source_system_id as\
source_system_sk,\
nms.hosted_client_sk, nh.dw_start_date, current_timestamp()::timestamp_ntz as dw_stop_date, null as dw_current_ind, 'D' as dml_type\
from dimension_unit_of_measure nh\
inner join stage_unit_of_measure_changes nms\
on nh.unit_of_measure_id = nms.unit_of_measure_id\
where ((nms.metadata$action = 'DELETE' and nms.metadata$isupdate = 'FALSE') OR (nms.metadata$action = 'INSERT' AND nms.dw_soft_delete_ind = 'Y'))\
and nh.dw_current_ind = 'Y'\
order by nms.dw_load_date);\
--END VIEW DDL\
\
--Create Task\
create or replace task populate_dimension_unit_of_measure warehouse = mdw_wh schedule = '1 minute' when system$stream_has_data('stage_unit_of_measure_changes')\
as \
--START MERGE\
merge into DIMENSION_unit_of_measure nh --Target table to merge changes from STAGE_unit_of_measure into\
using unit_of_measure_change_data m --view\
-- The unit_of_measure_change_data view holds the logic that determines what to insert/update into the DIMENSION_unit_of_measure table.\
   on nh.unit_of_measure_id = m.unit_of_measure_id \
   and nh.source_system_sk = m.source_system_sk\
   -- unit_of_measure_id & source_system_sk columns determine if there is a unique record in the DIMENSION_unit_of_measure table\
   and nh.dw_current_ind = 'Y' --only update current rows (needed?) \
when matched and m.dml_type = 'D' \
then update -- Deletes are essentially logical deletes. The record is stamped and no newer version is inserted\
    set nh.dw_stop_date = m.dw_stop_date,\
        nh.dw_current_ind = 'N'\
--New for non-SCD2 UPDATE\
when matched and m.dml_type = 'UPDATE' and nh.dw_current_ind = 'Y'\
then update\
set \
nh.unit_of_measure_name=m.unit_of_measure_name, \
nh.unit_of_measure_desc=m.unit_of_measure_desc, \
nh.hosted_client_sk = m.hosted_client_sk,\
nh.dw_load_date = current_timestamp()\
--End UPDATE\
when not matched and m.dml_type = 'I' then insert -- Inserting a new unit_of_measure_id and updating an existing one both result in an insert\
(unit_of_measure_sk, unit_of_measure_id, unit_of_measure_name, unit_of_measure_desc, source_system_sk, \
hosted_client_sk, dw_start_date, dw_stop_date, dw_current_ind)\
values (SEQ_unit_of_measure.nextval, m.unit_of_measure_id, m.unit_of_measure_name, m.unit_of_measure_desc, m.source_system_sk, \
m.hosted_client_sk, m.dw_start_date, m.dw_stop_date, m.dw_current_ind);\
-- END MERGE\
--END TASK\
\
--Schedule Task\
alter task populate_dimension_unit_of_measure resume;\
show tasks;\
\
-- Suspend the task (as needed)\
--alter task populate_dimension_unit_of_measure suspend;}